//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/Player/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""b5bda26d-d9d8-4848-a6aa-fb3b2b5be076"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""10df39e0-feb6-4e75-b4aa-fb29252196d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""211651b2-7e63-42b6-b905-c2669d7b5656"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""053d7e6d-53aa-4f62-9304-ec6a0396ddf2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6a4b9aae-52fe-4a2c-b3f4-5c9aa9d08625"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""38fdb886-b74c-4ff5-8392-88589c806bc8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""18d6b024-6373-4470-97f8-17285560b7a8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""14b4afc4-764e-493e-8c6d-247a12c33086"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""e4dad99f-b9e9-4426-af2b-fb0c4c863006"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KeepingAttack"",
                    ""type"": ""Button"",
                    ""id"": ""2da468c6-a2c2-4c4a-a958-c6be2d2fdf60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""86941316-5211-49a2-b972-ea9c954c843a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill1"",
                    ""type"": ""Button"",
                    ""id"": ""0612a0d9-fe8d-4fbe-bcef-879a5df0f065"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill2"",
                    ""type"": ""Button"",
                    ""id"": ""68afdbbe-e02b-43d5-9056-12dcffad2ae2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialSkill"",
                    ""type"": ""Button"",
                    ""id"": ""f484a6b9-05cf-492a-b44f-38c59e138b07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8984a208-3569-4e40-b09b-ffcc9b80dc73"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""141568a7-22e8-4df2-8b9d-0c94640ba684"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeepingAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec3813a0-7f51-4efd-bf27-599569bae3d1"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1012e4a-187b-4806-9abc-c5c27e678597"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e2cee1a-f7c5-4ce6-a9bb-fbb3cf27b511"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82078207-00ee-4bf6-a576-3ae9a81f9b06"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SaveAndLoad"",
            ""id"": ""db9e0745-01dd-4eaf-a598-6a65fb59dc5e"",
            ""actions"": [
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""fc2eeb11-d05f-48ca-9101-cae5931e4e2d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""f2cd3218-d9f4-40db-9136-1b9b471d473f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9e169b1-7a1f-4715-9b35-74e5964e4585"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f99653b-33b2-4c67-b7ac-0e6d4023767a"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""c48d046e-aa6f-4a18-9cd2-f7cb203d582e"",
            ""actions"": [
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""6b15c1ce-27a8-41e2-b2d2-76033910cbe8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""f3eaf88d-ed59-4347-b3c2-cc9cb6949043"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b929eb9f-1d65-4273-9f16-ea53da83bf27"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""546b4b0f-b0b4-4c2d-b1ba-6326c5946554"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4dd406b-f571-483a-a95c-3b3ad559de8e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SkillPanel"",
            ""id"": ""a7465181-5f29-45ab-b663-5a0412690d59"",
            ""actions"": [
                {
                    ""name"": ""OpenSkillPanel"",
                    ""type"": ""Button"",
                    ""id"": ""4ca6de8a-c790-4771-93f2-042aae0c4061"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseSkillPanel"",
                    ""type"": ""Button"",
                    ""id"": ""38da2895-674e-4cac-873e-3a1cfc5400a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""83b92db6-3c97-4940-88a0-f4cb194882d5"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenSkillPanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74313cb1-731a-40a6-94ec-babe47d67df8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseSkillPanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Evolve"",
            ""id"": ""ba3924f5-4e2d-42d5-8e77-822312869730"",
            ""actions"": [
                {
                    ""name"": ""Evolve"",
                    ""type"": ""Button"",
                    ""id"": ""26439597-6b8d-449b-9a94-eac043af14f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37abc795-669e-42c9-b587-3f09ee088294"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Evolve"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Attack = m_Combat.FindAction("Attack", throwIfNotFound: true);
        m_Combat_KeepingAttack = m_Combat.FindAction("KeepingAttack", throwIfNotFound: true);
        m_Combat_Dash = m_Combat.FindAction("Dash", throwIfNotFound: true);
        m_Combat_Skill1 = m_Combat.FindAction("Skill1", throwIfNotFound: true);
        m_Combat_Skill2 = m_Combat.FindAction("Skill2", throwIfNotFound: true);
        m_Combat_SpecialSkill = m_Combat.FindAction("SpecialSkill", throwIfNotFound: true);
        // SaveAndLoad
        m_SaveAndLoad = asset.FindActionMap("SaveAndLoad", throwIfNotFound: true);
        m_SaveAndLoad_Save = m_SaveAndLoad.FindAction("Save", throwIfNotFound: true);
        m_SaveAndLoad_Load = m_SaveAndLoad.FindAction("Load", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_Open = m_Inventory.FindAction("Open", throwIfNotFound: true);
        m_Inventory_Close = m_Inventory.FindAction("Close", throwIfNotFound: true);
        // SkillPanel
        m_SkillPanel = asset.FindActionMap("SkillPanel", throwIfNotFound: true);
        m_SkillPanel_OpenSkillPanel = m_SkillPanel.FindAction("OpenSkillPanel", throwIfNotFound: true);
        m_SkillPanel_CloseSkillPanel = m_SkillPanel.FindAction("CloseSkillPanel", throwIfNotFound: true);
        // Evolve
        m_Evolve = asset.FindActionMap("Evolve", throwIfNotFound: true);
        m_Evolve_Evolve = m_Evolve.FindAction("Evolve", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @PlayerAction m_Wrapper;
        public MovementActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_Attack;
    private readonly InputAction m_Combat_KeepingAttack;
    private readonly InputAction m_Combat_Dash;
    private readonly InputAction m_Combat_Skill1;
    private readonly InputAction m_Combat_Skill2;
    private readonly InputAction m_Combat_SpecialSkill;
    public struct CombatActions
    {
        private @PlayerAction m_Wrapper;
        public CombatActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Combat_Attack;
        public InputAction @KeepingAttack => m_Wrapper.m_Combat_KeepingAttack;
        public InputAction @Dash => m_Wrapper.m_Combat_Dash;
        public InputAction @Skill1 => m_Wrapper.m_Combat_Skill1;
        public InputAction @Skill2 => m_Wrapper.m_Combat_Skill2;
        public InputAction @SpecialSkill => m_Wrapper.m_Combat_SpecialSkill;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @KeepingAttack.started += instance.OnKeepingAttack;
            @KeepingAttack.performed += instance.OnKeepingAttack;
            @KeepingAttack.canceled += instance.OnKeepingAttack;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Skill1.started += instance.OnSkill1;
            @Skill1.performed += instance.OnSkill1;
            @Skill1.canceled += instance.OnSkill1;
            @Skill2.started += instance.OnSkill2;
            @Skill2.performed += instance.OnSkill2;
            @Skill2.canceled += instance.OnSkill2;
            @SpecialSkill.started += instance.OnSpecialSkill;
            @SpecialSkill.performed += instance.OnSpecialSkill;
            @SpecialSkill.canceled += instance.OnSpecialSkill;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @KeepingAttack.started -= instance.OnKeepingAttack;
            @KeepingAttack.performed -= instance.OnKeepingAttack;
            @KeepingAttack.canceled -= instance.OnKeepingAttack;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Skill1.started -= instance.OnSkill1;
            @Skill1.performed -= instance.OnSkill1;
            @Skill1.canceled -= instance.OnSkill1;
            @Skill2.started -= instance.OnSkill2;
            @Skill2.performed -= instance.OnSkill2;
            @Skill2.canceled -= instance.OnSkill2;
            @SpecialSkill.started -= instance.OnSpecialSkill;
            @SpecialSkill.performed -= instance.OnSpecialSkill;
            @SpecialSkill.canceled -= instance.OnSpecialSkill;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // SaveAndLoad
    private readonly InputActionMap m_SaveAndLoad;
    private List<ISaveAndLoadActions> m_SaveAndLoadActionsCallbackInterfaces = new List<ISaveAndLoadActions>();
    private readonly InputAction m_SaveAndLoad_Save;
    private readonly InputAction m_SaveAndLoad_Load;
    public struct SaveAndLoadActions
    {
        private @PlayerAction m_Wrapper;
        public SaveAndLoadActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Save => m_Wrapper.m_SaveAndLoad_Save;
        public InputAction @Load => m_Wrapper.m_SaveAndLoad_Load;
        public InputActionMap Get() { return m_Wrapper.m_SaveAndLoad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SaveAndLoadActions set) { return set.Get(); }
        public void AddCallbacks(ISaveAndLoadActions instance)
        {
            if (instance == null || m_Wrapper.m_SaveAndLoadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SaveAndLoadActionsCallbackInterfaces.Add(instance);
            @Save.started += instance.OnSave;
            @Save.performed += instance.OnSave;
            @Save.canceled += instance.OnSave;
            @Load.started += instance.OnLoad;
            @Load.performed += instance.OnLoad;
            @Load.canceled += instance.OnLoad;
        }

        private void UnregisterCallbacks(ISaveAndLoadActions instance)
        {
            @Save.started -= instance.OnSave;
            @Save.performed -= instance.OnSave;
            @Save.canceled -= instance.OnSave;
            @Load.started -= instance.OnLoad;
            @Load.performed -= instance.OnLoad;
            @Load.canceled -= instance.OnLoad;
        }

        public void RemoveCallbacks(ISaveAndLoadActions instance)
        {
            if (m_Wrapper.m_SaveAndLoadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISaveAndLoadActions instance)
        {
            foreach (var item in m_Wrapper.m_SaveAndLoadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SaveAndLoadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SaveAndLoadActions @SaveAndLoad => new SaveAndLoadActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
    private readonly InputAction m_Inventory_Open;
    private readonly InputAction m_Inventory_Close;
    public struct InventoryActions
    {
        private @PlayerAction m_Wrapper;
        public InventoryActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Open => m_Wrapper.m_Inventory_Open;
        public InputAction @Close => m_Wrapper.m_Inventory_Close;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
            @Open.started += instance.OnOpen;
            @Open.performed += instance.OnOpen;
            @Open.canceled += instance.OnOpen;
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(IInventoryActions instance)
        {
            @Open.started -= instance.OnOpen;
            @Open.performed -= instance.OnOpen;
            @Open.canceled -= instance.OnOpen;
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);

    // SkillPanel
    private readonly InputActionMap m_SkillPanel;
    private List<ISkillPanelActions> m_SkillPanelActionsCallbackInterfaces = new List<ISkillPanelActions>();
    private readonly InputAction m_SkillPanel_OpenSkillPanel;
    private readonly InputAction m_SkillPanel_CloseSkillPanel;
    public struct SkillPanelActions
    {
        private @PlayerAction m_Wrapper;
        public SkillPanelActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenSkillPanel => m_Wrapper.m_SkillPanel_OpenSkillPanel;
        public InputAction @CloseSkillPanel => m_Wrapper.m_SkillPanel_CloseSkillPanel;
        public InputActionMap Get() { return m_Wrapper.m_SkillPanel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillPanelActions set) { return set.Get(); }
        public void AddCallbacks(ISkillPanelActions instance)
        {
            if (instance == null || m_Wrapper.m_SkillPanelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SkillPanelActionsCallbackInterfaces.Add(instance);
            @OpenSkillPanel.started += instance.OnOpenSkillPanel;
            @OpenSkillPanel.performed += instance.OnOpenSkillPanel;
            @OpenSkillPanel.canceled += instance.OnOpenSkillPanel;
            @CloseSkillPanel.started += instance.OnCloseSkillPanel;
            @CloseSkillPanel.performed += instance.OnCloseSkillPanel;
            @CloseSkillPanel.canceled += instance.OnCloseSkillPanel;
        }

        private void UnregisterCallbacks(ISkillPanelActions instance)
        {
            @OpenSkillPanel.started -= instance.OnOpenSkillPanel;
            @OpenSkillPanel.performed -= instance.OnOpenSkillPanel;
            @OpenSkillPanel.canceled -= instance.OnOpenSkillPanel;
            @CloseSkillPanel.started -= instance.OnCloseSkillPanel;
            @CloseSkillPanel.performed -= instance.OnCloseSkillPanel;
            @CloseSkillPanel.canceled -= instance.OnCloseSkillPanel;
        }

        public void RemoveCallbacks(ISkillPanelActions instance)
        {
            if (m_Wrapper.m_SkillPanelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISkillPanelActions instance)
        {
            foreach (var item in m_Wrapper.m_SkillPanelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SkillPanelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SkillPanelActions @SkillPanel => new SkillPanelActions(this);

    // Evolve
    private readonly InputActionMap m_Evolve;
    private List<IEvolveActions> m_EvolveActionsCallbackInterfaces = new List<IEvolveActions>();
    private readonly InputAction m_Evolve_Evolve;
    public struct EvolveActions
    {
        private @PlayerAction m_Wrapper;
        public EvolveActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Evolve => m_Wrapper.m_Evolve_Evolve;
        public InputActionMap Get() { return m_Wrapper.m_Evolve; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EvolveActions set) { return set.Get(); }
        public void AddCallbacks(IEvolveActions instance)
        {
            if (instance == null || m_Wrapper.m_EvolveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EvolveActionsCallbackInterfaces.Add(instance);
            @Evolve.started += instance.OnEvolve;
            @Evolve.performed += instance.OnEvolve;
            @Evolve.canceled += instance.OnEvolve;
        }

        private void UnregisterCallbacks(IEvolveActions instance)
        {
            @Evolve.started -= instance.OnEvolve;
            @Evolve.performed -= instance.OnEvolve;
            @Evolve.canceled -= instance.OnEvolve;
        }

        public void RemoveCallbacks(IEvolveActions instance)
        {
            if (m_Wrapper.m_EvolveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEvolveActions instance)
        {
            foreach (var item in m_Wrapper.m_EvolveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EvolveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EvolveActions @Evolve => new EvolveActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnKeepingAttack(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnSkill1(InputAction.CallbackContext context);
        void OnSkill2(InputAction.CallbackContext context);
        void OnSpecialSkill(InputAction.CallbackContext context);
    }
    public interface ISaveAndLoadActions
    {
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnOpen(InputAction.CallbackContext context);
        void OnClose(InputAction.CallbackContext context);
    }
    public interface ISkillPanelActions
    {
        void OnOpenSkillPanel(InputAction.CallbackContext context);
        void OnCloseSkillPanel(InputAction.CallbackContext context);
    }
    public interface IEvolveActions
    {
        void OnEvolve(InputAction.CallbackContext context);
    }
}
